type token =
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LET
  | IN
  | COLON
  | COMMA
  | SEMI
  | DSEMI
  | ARROW
  | FORALL
  | EXISTS
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | INT
  | BOOL
  | REAL
  | CHAR
  | SET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQUAL
  | PIPE
  | LITERAL of (int)
  | REALLIT of (string)
  | BOOLLIT of (bool)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 47 "parser.ml"
let yytransl_const = [|
  257 (* LBRACKET *);
  258 (* RBRACKET *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LET *);
  264 (* IN *);
  265 (* COLON *);
  266 (* COMMA *);
  267 (* SEMI *);
  268 (* DSEMI *);
  269 (* ARROW *);
  270 (* FORALL *);
  271 (* EXISTS *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* AND *);
  279 (* OR *);
  280 (* INT *);
  281 (* BOOL *);
  282 (* REAL *);
  283 (* CHAR *);
  284 (* SET *);
  285 (* PLUS *);
  286 (* MINUS *);
  287 (* TIMES *);
  288 (* DIVIDE *);
  289 (* EQUAL *);
  290 (* PIPE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* LITERAL *);
  292 (* REALLIT *);
  293 (* BOOLLIT *);
  294 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\008\000\008\000\
\008\000\008\000\002\000\002\000\006\000\006\000\006\000\005\000\
\005\000\009\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\002\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\006\000\006\000\
\003\000\003\000\004\000\003\000\007\000\008\000\002\000\004\000\
\005\000\007\000\000\000\002\000\000\000\001\000\003\000\001\000\
\003\000\002\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\035\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\010\000\011\000\000\000\001\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\015\000\000\000\
\000\000\000\000\000\000\002\000\003\000\004\000\005\000\000\000\
\000\000\000\000\000\000\000\000\032\000\027\000\000\000\000\000\
\033\000\000\000\007\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\034\000\044\000\030\000"

let yydgoto = "\002\000\
\003\000\004\000\072\000\048\000\049\000\050\000\097\000\016\000\
\094\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\001\000\050\255\243\254\005\255\011\255\
\079\255\000\000\000\000\000\000\013\255\000\000\081\255\000\000\
\012\255\179\000\255\254\043\255\053\255\059\255\070\255\000\000\
\079\255\079\255\000\000\079\255\079\255\079\255\079\255\079\255\
\079\255\079\255\079\255\079\255\079\255\079\255\079\255\079\255\
\079\255\051\255\000\000\079\255\226\255\079\255\079\255\255\000\
\086\255\085\255\162\000\038\001\038\001\076\255\076\255\076\255\
\076\255\023\001\016\001\247\254\247\254\000\000\000\000\092\255\
\198\000\111\255\255\000\000\000\000\000\000\000\000\000\249\254\
\217\000\236\000\089\255\079\255\000\000\000\000\079\255\079\255\
\000\000\226\255\000\000\079\255\079\255\000\000\255\000\084\000\
\101\000\110\255\255\000\255\000\033\255\129\255\000\000\079\255\
\136\255\081\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\044\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\123\000\000\000\000\000\000\000\
\062\000\066\255\000\000\000\000\000\000\000\000\114\255\000\000\
\146\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\255\
\000\000\000\000\000\000\036\000\039\000\185\255\205\255\225\255\
\007\000\117\255\065\000\143\255\164\255\000\000\000\000\000\000\
\000\000\000\000\069\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\145\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\255\000\000\
\151\255\139\255\007\255\047\255\000\000\000\000\000\000\146\255\
\000\000\155\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\072\000\087\000\254\255\216\255\166\000\000\000\000\000\
\000\000"

let yytablesize = 582
let yytable = "\064\000\
\014\000\015\000\018\000\081\000\043\000\082\000\024\000\040\000\
\044\000\040\000\023\000\001\000\023\000\038\000\040\000\025\000\
\023\000\023\000\023\000\041\000\083\000\038\000\039\000\051\000\
\020\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\005\000\065\000\006\000\
\023\000\067\000\021\000\073\000\074\000\026\000\007\000\008\000\
\022\000\037\000\024\000\045\000\024\000\037\000\005\000\100\000\
\024\000\024\000\024\000\041\000\046\000\041\000\009\000\007\000\
\008\000\039\000\047\000\010\000\011\000\012\000\013\000\038\000\
\040\000\087\000\039\000\038\000\088\000\089\000\039\000\009\000\
\024\000\091\000\092\000\005\000\010\000\011\000\012\000\017\000\
\066\000\075\000\098\000\027\000\007\000\008\000\076\000\078\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\009\000\036\000\037\000\038\000\
\039\000\010\000\011\000\012\000\023\000\008\000\080\000\008\000\
\025\000\086\000\025\000\008\000\008\000\008\000\025\000\025\000\
\025\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\083\000\025\000\025\000\099\000\101\000\008\000\008\000\
\008\000\008\000\012\000\008\000\012\000\006\000\025\000\006\000\
\012\000\012\000\012\000\037\000\043\000\093\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\042\000\013\000\
\090\000\013\000\019\000\012\000\012\000\013\000\013\000\013\000\
\012\000\000\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\019\000\000\000\019\000\000\000\
\013\000\013\000\019\000\019\000\019\000\013\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\020\000\000\000\020\000\000\000\000\000\000\000\020\000\020\000\
\020\000\000\000\019\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\021\000\000\000\021\000\000\000\
\000\000\000\000\021\000\021\000\021\000\000\000\020\000\000\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\068\000\069\000\070\000\071\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\005\000\000\000\006\000\
\000\000\000\000\022\000\000\000\022\000\000\000\007\000\008\000\
\022\000\022\000\022\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\009\000\000\000\
\000\000\000\000\000\000\010\000\011\000\012\000\013\000\017\000\
\022\000\017\000\018\000\000\000\018\000\017\000\017\000\017\000\
\018\000\018\000\018\000\017\000\017\000\000\000\018\000\018\000\
\000\000\017\000\017\000\000\000\018\000\018\000\000\000\000\000\
\000\000\000\000\000\000\008\000\026\000\017\000\026\000\008\000\
\018\000\000\000\026\000\026\000\026\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\026\000\
\000\000\095\000\008\000\008\000\008\000\008\000\000\000\008\000\
\000\000\000\000\026\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\000\000\000\000\000\000\096\000\000\000\
\036\000\037\000\038\000\039\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\000\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\008\000\008\000\000\000\
\000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\000\000\000\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\027\000\027\000\000\000\000\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\000\000\000\000\077\000\027\000\027\000\027\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\000\000\000\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\000\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\000\000\042\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\000\000\079\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\000\000\000\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\000\000\084\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\000\000\000\000\000\000\000\000\000\000\
\036\000\037\000\038\000\039\000\000\000\085\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\038\000\039\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\028\000\029\000\
\030\000\031\000\032\000\033\000\036\000\037\000\038\000\039\000\
\000\000\000\000\000\000\036\000\037\000\038\000\039\000\030\000\
\031\000\032\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000"

let yycheck = "\040\000\
\000\000\004\000\005\000\011\001\006\001\013\001\009\000\004\001\
\010\001\006\001\004\001\001\000\006\001\010\001\003\001\003\001\
\010\001\011\001\012\001\008\001\028\001\031\001\032\001\026\000\
\038\001\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\005\001\041\000\007\001\
\034\001\044\000\038\001\046\000\047\000\033\001\014\001\015\001\
\038\001\006\001\004\001\009\001\006\001\010\001\005\001\096\000\
\010\001\011\001\012\001\004\001\008\001\006\001\030\001\014\001\
\015\001\010\001\008\001\035\001\036\001\037\001\038\001\006\001\
\003\001\076\000\006\001\010\001\079\000\080\000\010\001\030\001\
\034\001\084\000\085\000\005\001\035\001\036\001\037\001\038\001\
\038\001\004\001\093\000\011\001\014\001\015\001\010\001\004\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\029\001\030\001\031\001\032\001\030\001\029\001\030\001\031\001\
\032\001\035\001\036\001\037\001\038\001\004\001\008\001\006\001\
\004\001\033\001\006\001\010\001\011\001\012\001\010\001\011\001\
\012\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\028\001\022\001\023\001\012\001\006\001\029\001\030\001\
\031\001\032\001\004\001\034\001\006\001\011\001\034\001\013\001\
\010\001\011\001\012\001\010\001\006\001\086\000\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\012\001\004\001\
\082\000\006\001\005\000\029\001\030\001\010\001\011\001\012\001\
\034\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\004\001\255\255\006\001\255\255\
\029\001\030\001\010\001\011\001\012\001\034\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\255\255\034\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\255\255\034\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\005\001\255\255\007\001\
\255\255\255\255\004\001\255\255\006\001\255\255\014\001\015\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\004\001\
\034\001\006\001\004\001\255\255\006\001\010\001\011\001\012\001\
\010\001\011\001\012\001\016\001\017\001\255\255\016\001\017\001\
\255\255\022\001\023\001\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\006\001\004\001\034\001\006\001\010\001\
\034\001\255\255\010\001\011\001\012\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\023\001\
\255\255\006\001\029\001\030\001\031\001\032\001\255\255\034\001\
\255\255\255\255\034\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\010\001\255\255\
\029\001\030\001\031\001\032\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\011\001\029\001\030\001\031\001\
\032\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\255\255\034\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\255\255\034\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\034\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\255\255\034\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\016\001\017\001\
\018\001\019\001\020\001\021\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001"

let yynames_const = "\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  COLON\000\
  COMMA\000\
  SEMI\000\
  DSEMI\000\
  ARROW\000\
  FORALL\000\
  EXISTS\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  INT\000\
  BOOL\000\
  REAL\000\
  CHAR\000\
  SET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQUAL\000\
  PIPE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  REALLIT\000\
  BOOLLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 48 "parser.mly"
                ( List.rev _1 )
# 365 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                 ( PrimTyp(Int) )
# 371 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                 ( PrimTyp(Bool) )
# 377 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                 ( PrimTyp(Real) )
# 383 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                 ( PrimTyp(Char) )
# 389 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 56 "parser.mly"
                 ( Func(_1, _3) )
# 397 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 57 "parser.mly"
                 ( Set(_1) )
# 404 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                        ( Id(_1) )
# 411 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 63 "parser.mly"
                        ( Lit(_1) )
# 418 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                        ( RealLit(_1) )
# 425 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 65 "parser.mly"
                        ( BoolLit(_1) )
# 432 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 440 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 448 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 456 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 464 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                        ( Uniop(Neg, _2) )
# 471 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                        ( Binop(_1, Equal, _3) )
# 479 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                        ( Binop(_1, Neq,   _3) )
# 487 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                        ( Binop(_1, Less,  _3) )
# 495 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                        ( Binop(_1, Leq,   _3) )
# 503 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                        ( Binop(_1, Greater, _3) )
# 511 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                        ( Binop(_1, Geq,   _3) )
# 519 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                              ( SetBuilder(Iter(_2, _4), FuncDef([], [Expr(_6)])) )
# 528 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                              ( SetBuilder(Iter(_2, _4), FuncDef([], [Expr(_6)])) )
# 537 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                        ( Binop(_1, And, _3) )
# 545 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                        ( Binop(_1, Or, _3) )
# 553 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_ne) in
    Obj.repr(
# 81 "parser.mly"
                                ( FuncCall(_1, _3) )
# 561 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 82 "parser.mly"
                          ( SetLit(List.rev _2) )
# 568 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
    ( SetBuilder(Iter(_2, _4), FuncDef([Id(_2)], [Expr(_6)])) )
# 577 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'set_build_ext_cond) in
    Obj.repr(
# 87 "parser.mly"
    ( SetBuilderExt(
        FuncDef([Id(_4)], [Expr(_2)]), 
        Iter(_4, _6),
        List.rev _7
    ))
# 591 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                           ( Expr(_1) )
# 598 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                           ( Asn(_1, _3) )
# 606 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 97 "parser.mly"
                           ( Decl(_2, _4) )
# 614 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr_list_ne) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'func_stmt_list) in
    Obj.repr(
# 99 "parser.mly"
                           ( Asn(_1, FuncDef(List.rev _3, List.rev _6)) )
# 623 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                 ( [] )
# 629 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 103 "parser.mly"
                 ( _2 :: _1 )
# 637 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                       ( [] )
# 643 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                       ( [_1] )
# 650 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( _3 :: _1 )
# 658 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( [_1] )
# 665 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( _3 :: _1 )
# 673 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                  ( Expr(_2) :: _1 )
# 681 "parser.ml"
               : 'func_stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                      ( [] )
# 687 "parser.ml"
               : 'set_build_ext_cond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list_ne) in
    Obj.repr(
# 134 "parser.mly"
                      ( _2 )
# 694 "parser.ml"
               : 'set_build_ext_cond))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
