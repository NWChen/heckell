type token =
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LET
  | COLON
  | COMMA
  | SEMI
  | DSEMI
  | ARROW
  | INT
  | BOOL
  | REAL
  | CHAR
  | SET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQUAL
  | LITERAL of (int)
  | REALLIT of (string)
  | BOOLLIT of (bool)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 35 "parser.ml"
let yytransl_const = [|
  257 (* LBRACKET *);
  258 (* RBRACKET *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LET *);
  264 (* COLON *);
  265 (* COMMA *);
  266 (* SEMI *);
  267 (* DSEMI *);
  268 (* ARROW *);
  269 (* INT *);
  270 (* BOOL *);
  271 (* REAL *);
  272 (* CHAR *);
  273 (* SET *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* TIMES *);
  277 (* DIVIDE *);
  278 (* EQUAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  279 (* LITERAL *);
  280 (* REALLIT *);
  281 (* BOOLLIT *);
  282 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\002\000\002\000\
\005\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\002\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\000\000\002\000\
\004\000\005\000\007\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\015\000\000\000\022\000\000\000\000\000\000\000\001\000\016\000\
\000\000\000\000\000\000\000\000\021\000\000\000\012\000\013\000\
\014\000\000\000\002\000\003\000\004\000\005\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\018\000\000\000\
\007\000\015\000\020\000\000\000\000\000\010\000\011\000\000\000\
\000\000\019\000"

let yydgoto = "\002\000\
\003\000\004\000\023\000\018\000\008\000\014\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\001\000\236\254\255\254\000\000\000\000\
\016\255\005\255\241\254\025\255\000\000\003\255\000\000\000\000\
\000\000\251\254\000\000\000\000\000\000\000\000\020\255\021\255\
\018\255\000\000\241\254\241\254\241\254\241\254\000\000\025\255\
\000\000\000\000\000\000\002\255\002\255\000\000\000\000\015\255\
\249\254\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\255\010\255\000\000\000\000\001\255\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\008\000\013\000\006\000\000\000\000\000"

let yytablesize = 283
let yytable = "\005\000\
\007\000\010\000\001\000\042\000\026\000\009\000\024\000\015\000\
\016\000\017\000\006\000\025\000\027\000\028\000\029\000\030\000\
\008\000\006\000\006\000\009\000\011\000\029\000\030\000\012\000\
\008\000\008\000\032\000\009\000\009\000\031\000\013\000\032\000\
\036\000\037\000\038\000\039\000\033\000\019\000\020\000\021\000\
\022\000\041\000\034\000\035\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000"

let yycheck = "\007\001\
\000\000\003\001\001\000\011\001\010\001\026\001\004\001\023\001\
\024\001\025\001\010\001\009\001\018\001\019\001\020\001\021\001\
\010\001\017\001\026\001\010\001\022\001\020\001\021\001\008\001\
\018\001\019\001\012\001\018\001\019\001\010\001\026\001\012\001\
\027\000\028\000\029\000\030\000\017\001\013\001\014\001\015\001\
\016\001\034\000\022\001\026\001\032\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001"

let yynames_const = "\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  COLON\000\
  COMMA\000\
  SEMI\000\
  DSEMI\000\
  ARROW\000\
  INT\000\
  BOOL\000\
  REAL\000\
  CHAR\000\
  SET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQUAL\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  REALLIT\000\
  BOOLLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 36 "parser.mly"
                ( _1 )
# 226 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                 ( PrimTyp(Int) )
# 232 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( PrimTyp(Bool) )
# 238 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                 ( PrimTyp(Real) )
# 244 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                 ( PrimTyp(Char) )
# 250 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 44 "parser.mly"
                 ( Func(_1, _3) )
# 258 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 45 "parser.mly"
                 ( Set(_1) )
# 265 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 273 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 281 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 289 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 297 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 53 "parser.mly"
                        ( Lit(_1) )
# 304 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                        ( RealLit(_1) )
# 311 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 55 "parser.mly"
                        ( BoolLit(_1) )
# 318 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                   ( [] )
# 324 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 59 "parser.mly"
                   ( _2 :: _1 )
# 332 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                           ( Asn(_1, _3) )
# 340 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
                           ( Decl(_2, _4) )
# 348 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'formal_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 65 "parser.mly"
                           ( Asn(_1, FuncDef(_3, _6)) )
# 357 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                        ( Id(_3) :: _1 )
# 365 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
                        ( [Id(_1)] )
# 372 "parser.ml"
               : 'formal_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
