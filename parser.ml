type token =
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LET
  | IN
  | COLON
  | COMMA
  | SEMI
  | DSEMI
  | ARROW
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | INT
  | BOOL
  | REAL
  | CHAR
  | SET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQUAL
  | PIPE
  | LITERAL of (int)
  | REALLIT of (string)
  | BOOLLIT of (bool)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 45 "parser.ml"
let yytransl_const = [|
  257 (* LBRACKET *);
  258 (* RBRACKET *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LET *);
  264 (* IN *);
  265 (* COLON *);
  266 (* COMMA *);
  267 (* SEMI *);
  268 (* DSEMI *);
  269 (* ARROW *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* AND *);
  277 (* OR *);
  278 (* INT *);
  279 (* BOOL *);
  280 (* REAL *);
  281 (* CHAR *);
  282 (* SET *);
  283 (* PLUS *);
  284 (* MINUS *);
  285 (* TIMES *);
  286 (* DIVIDE *);
  287 (* EQUAL *);
  288 (* PIPE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  289 (* LITERAL *);
  290 (* REALLIT *);
  291 (* BOOLLIT *);
  292 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\005\000\
\005\000\004\000\004\000\006\000\006\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\011\000\011\000\011\000\011\000\002\000\
\002\000\009\000\009\000\009\000\008\000\008\000\012\000\010\000\
\010\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\002\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
\003\000\007\000\008\000\002\000\004\000\005\000\007\000\000\000\
\002\000\000\000\001\000\003\000\001\000\003\000\002\000\000\000\
\002\000\002\000"

let yydefred = "\000\000\
\040\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\015\000\016\000\017\000\000\000\001\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\021\000\000\000\000\000\000\000\
\000\000\000\000\002\000\003\000\004\000\005\000\000\000\000\000\
\010\000\000\000\000\000\037\000\031\000\000\000\000\000\000\000\
\006\000\000\000\038\000\000\000\040\000\000\000\000\000\000\000\
\007\000\000\000\000\000\011\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\039\000\049\000\035\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\071\000\072\000\073\000\091\000\046\000\047\000\
\048\000\097\000\015\000\094\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\019\255\046\255\010\255\019\255\
\000\000\000\000\000\000\007\255\000\000\132\000\000\000\092\255\
\207\000\003\255\250\255\169\000\065\255\051\255\000\000\019\255\
\019\255\000\000\019\255\019\255\019\255\019\255\019\255\019\255\
\019\255\019\255\019\255\019\255\019\255\019\255\019\255\000\000\
\019\255\019\255\070\255\000\000\052\000\207\000\113\255\121\255\
\152\000\246\000\246\000\244\255\244\255\244\255\244\255\231\000\
\224\000\246\254\246\254\000\000\000\000\129\255\207\000\188\000\
\127\255\052\000\000\000\000\000\000\000\000\000\164\255\094\255\
\000\000\119\255\019\255\000\000\000\000\019\255\019\255\005\255\
\000\000\052\000\000\000\052\000\000\000\207\000\051\000\072\000\
\000\000\126\255\125\255\000\000\009\255\161\255\000\000\019\255\
\168\255\052\000\132\000\000\000\000\000\000\000\126\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\055\255\077\255\000\000\000\000\
\000\000\000\000\000\000\092\000\000\000\000\000\000\000\082\255\
\060\255\000\000\032\000\098\255\000\000\000\000\000\000\178\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\178\255\000\000\
\000\000\000\000\000\000\000\000\000\000\052\255\000\000\000\000\
\000\000\223\255\236\255\147\255\166\255\185\255\204\255\255\255\
\057\255\109\255\128\255\000\000\000\000\000\000\112\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\255\000\000\
\000\000\112\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\255\000\000\186\255\
\000\000\037\255\228\255\000\000\000\000\000\000\000\000\178\255\
\000\000\000\000\182\255\000\000\000\000\000\000\241\255"

let yygindex = "\000\000\
\000\000\122\000\179\255\006\000\000\000\000\000\254\255\217\255\
\079\000\000\000\000\000\000\000"

let yytablesize = 532
let yytable = "\062\000\
\013\000\014\000\017\000\020\000\090\000\023\000\040\000\008\000\
\089\000\024\000\001\000\005\000\041\000\006\000\008\000\007\000\
\008\000\084\000\037\000\038\000\103\000\005\000\049\000\006\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\008\000\025\000\063\000\064\000\
\012\000\009\000\010\000\011\000\012\000\022\000\008\000\012\000\
\005\000\012\000\006\000\009\000\010\000\011\000\016\000\045\000\
\101\000\045\000\042\000\045\000\030\000\043\000\030\000\043\000\
\042\000\012\000\030\000\030\000\030\000\043\000\044\000\080\000\
\086\000\008\000\041\000\087\000\088\000\030\000\009\000\010\000\
\011\000\019\000\042\000\018\000\021\000\014\000\042\000\014\000\
\030\000\092\000\099\000\014\000\014\000\014\000\039\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\043\000\
\083\000\065\000\084\000\043\000\014\000\014\000\014\000\014\000\
\018\000\014\000\018\000\044\000\074\000\044\000\018\000\018\000\
\018\000\044\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\075\000\019\000\077\000\019\000\079\000\018\000\
\018\000\019\000\019\000\019\000\018\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\085\000\025\000\081\000\
\025\000\098\000\019\000\019\000\025\000\025\000\025\000\019\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\046\000\026\000\046\000\026\000\100\000\102\000\044\000\026\000\
\026\000\026\000\025\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\042\000\027\000\081\000\027\000\048\000\
\082\000\047\000\027\000\027\000\027\000\026\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\093\000\028\000\
\000\000\028\000\000\000\000\000\000\000\028\000\028\000\028\000\
\027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\023\000\000\000\023\000\000\000\000\000\009\000\
\023\000\023\000\023\000\028\000\023\000\023\000\009\000\024\000\
\009\000\024\000\023\000\023\000\013\000\024\000\024\000\024\000\
\000\000\024\000\024\000\013\000\039\000\013\000\023\000\024\000\
\024\000\042\000\029\000\005\000\029\000\006\000\000\000\007\000\
\029\000\029\000\029\000\024\000\000\000\013\000\035\000\036\000\
\037\000\038\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\029\000\000\000\
\000\000\009\000\010\000\011\000\012\000\014\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\000\000\066\000\000\000\
\095\000\000\000\014\000\014\000\014\000\014\000\000\000\014\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\000\000\067\000\068\000\069\000\070\000\035\000\036\000\037\000\
\038\000\096\000\000\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\000\000\000\000\
\000\000\000\000\035\000\036\000\037\000\038\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\031\000\031\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\026\000\000\000\
\000\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\000\000\000\000\000\000\000\000\000\000\035\000\036\000\
\037\000\038\000\076\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\000\000\000\000\
\000\000\000\000\035\000\036\000\037\000\038\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\000\000\000\000\
\000\000\000\000\000\000\035\000\036\000\037\000\038\000\000\000\
\043\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\000\000\000\000\000\000\000\000\000\000\035\000\036\000\
\037\000\038\000\000\000\078\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\000\000\000\000\000\000\
\000\000\035\000\036\000\037\000\038\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\027\000\028\000\029\000\030\000\
\031\000\032\000\035\000\036\000\037\000\038\000\000\000\000\000\
\000\000\035\000\036\000\037\000\038\000\029\000\030\000\031\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\036\000\037\000\038\000"

let yycheck = "\039\000\
\000\000\004\000\005\000\006\000\082\000\008\000\004\001\004\001\
\004\001\003\001\001\000\003\001\010\001\005\001\011\001\007\001\
\013\001\013\001\029\001\030\001\098\000\003\001\025\000\005\001\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\028\001\031\001\041\000\042\000\
\004\001\033\001\034\001\035\001\036\001\036\001\028\001\011\001\
\003\001\013\001\005\001\033\001\034\001\035\001\036\001\004\001\
\096\000\006\001\004\001\009\001\004\001\010\001\006\001\004\001\
\010\001\029\001\010\001\011\001\012\001\010\001\006\001\066\000\
\075\000\028\001\010\001\078\000\079\000\021\001\033\001\034\001\
\035\001\036\001\006\001\005\000\006\000\004\001\010\001\006\001\
\032\001\084\000\093\000\010\001\011\001\012\001\003\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\006\001\
\011\001\036\001\013\001\010\001\027\001\028\001\029\001\030\001\
\004\001\032\001\006\001\004\001\004\001\006\001\010\001\011\001\
\012\001\010\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\010\001\004\001\004\001\006\001\008\001\027\001\
\028\001\010\001\011\001\012\001\032\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\031\001\004\001\026\001\
\006\001\029\001\027\001\028\001\010\001\011\001\012\001\032\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\004\001\004\001\006\001\006\001\012\001\006\001\010\001\010\001\
\011\001\012\001\032\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\010\001\004\001\026\001\006\001\006\001\
\029\001\012\001\010\001\011\001\012\001\032\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\085\000\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\032\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\004\001\255\255\006\001\255\255\255\255\004\001\
\010\001\011\001\012\001\032\001\014\001\015\001\011\001\004\001\
\013\001\006\001\020\001\021\001\004\001\010\001\011\001\012\001\
\255\255\014\001\015\001\011\001\003\001\013\001\032\001\020\001\
\021\001\008\001\004\001\003\001\006\001\005\001\255\255\007\001\
\010\001\011\001\012\001\032\001\255\255\029\001\027\001\028\001\
\029\001\030\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\032\001\255\255\
\255\255\033\001\034\001\035\001\036\001\006\001\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\003\001\255\255\
\006\001\255\255\027\001\028\001\029\001\030\001\255\255\032\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\022\001\023\001\024\001\025\001\027\001\028\001\029\001\
\030\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\011\001\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\032\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\255\255\032\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\014\001\015\001\016\001\017\001\
\018\001\019\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001"

let yynames_const = "\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  COLON\000\
  COMMA\000\
  SEMI\000\
  DSEMI\000\
  ARROW\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  INT\000\
  BOOL\000\
  REAL\000\
  CHAR\000\
  SET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQUAL\000\
  PIPE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  REALLIT\000\
  BOOLLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
                ( List.rev _1 )
# 349 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                      ( PrimTyp(Int) )
# 355 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                      ( PrimTyp(Bool) )
# 361 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                      ( PrimTyp(Real) )
# 367 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                      ( PrimTyp(Char) )
# 373 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_typ) in
    Obj.repr(
# 62 "parser.mly"
                             ( Set(_1) )
# 380 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
                      ( _2 )
# 387 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 66 "parser.mly"
                      ( _1 )
# 394 "parser.ml"
               : 'simple_typ_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 67 "parser.mly"
                              ( Tuple(_1 :: (List.rev _3)) )
# 402 "parser.ml"
               : 'simple_typ_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ_or_tuple) in
    Obj.repr(
# 70 "parser.mly"
                      ( _1 )
# 409 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
                      ( Func(_1, _3) )
# 417 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 75 "parser.mly"
                       ( [_1] )
# 424 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 76 "parser.mly"
                              ( _3 :: _1 )
# 432 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
                        ( Id(_1) )
# 439 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
                        ( Lit(_1) )
# 446 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                        ( RealLit(_1) )
# 453 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 82 "parser.mly"
                        ( BoolLit(_1) )
# 460 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 468 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 476 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 484 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 492 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                        ( Uniop(Neg, _2) )
# 499 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                        ( Binop(_1, Equal, _3) )
# 507 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                        ( Binop(_1, Neq,   _3) )
# 515 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                        ( Binop(_1, Less,  _3) )
# 523 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                        ( Binop(_1, Leq,   _3) )
# 531 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                        ( Binop(_1, Greater, _3) )
# 539 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                        ( Binop(_1, Geq,   _3) )
# 547 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                        ( Binop(_1, And, _3) )
# 555 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                        ( Binop(_1, Or, _3) )
# 563 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_ne) in
    Obj.repr(
# 96 "parser.mly"
                                ( FuncCall(_1, _3) )
# 571 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 97 "parser.mly"
                          ( TupleLit(List.rev _2) )
# 578 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 98 "parser.mly"
                          ( SetLit(List.rev _2) )
# 585 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
    ( SetBuilder(Iter(_2, _4), FuncDef([Id(_2)], [Expr(_6)])) )
# 594 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'set_build_ext_cond) in
    Obj.repr(
# 103 "parser.mly"
    ( SetBuilderExt(
        FuncDef([Id(_4)], [Expr(_2)]), 
        Iter(_4, _6),
        List.map (fun e -> FuncDef([Id(_4)], [Expr(e)])) (List.rev _7)
    ))
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                           ( Expr(_1) )
# 615 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                           ( Asn(_1, _3) )
# 623 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 113 "parser.mly"
                           ( Decl(_2, _4) )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr_list_ne) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'func_stmt_list) in
    Obj.repr(
# 115 "parser.mly"
                           ( Asn(_1, FuncDef(List.rev _3, List.rev _6)) )
# 640 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                 ( [] )
# 646 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 119 "parser.mly"
                 ( _2 :: _1 )
# 654 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                       ( [] )
# 660 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                       ( [_1] )
# 667 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                       ( _3 :: _1 )
# 675 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                       ( [_1] )
# 682 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                       ( _3 :: _1 )
# 690 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                  ( Expr(_2) :: _1 )
# 698 "parser.ml"
               : 'func_stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                      ( [] )
# 704 "parser.ml"
               : 'set_build_ext_cond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list_ne) in
    Obj.repr(
# 150 "parser.mly"
                      ( _2 )
# 711 "parser.ml"
               : 'set_build_ext_cond))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
