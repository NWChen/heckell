type token =
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LET
  | IN
  | COLON
  | COMMA
  | SEMI
  | DSEMI
  | ARROW
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | INT
  | BOOL
  | REAL
  | CHAR
  | SET
  | ARRAY
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQUAL
  | PIPE
  | ELLIPSE
  | LITERAL of (int)
  | REALLIT of (string)
  | BOOLLIT of (bool)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 47 "parser.ml"
let yytransl_const = [|
  257 (* LBRACKET *);
  258 (* RBRACKET *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LET *);
  264 (* IN *);
  265 (* COLON *);
  266 (* COMMA *);
  267 (* SEMI *);
  268 (* DSEMI *);
  269 (* ARROW *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* AND *);
  277 (* OR *);
  278 (* INT *);
  279 (* BOOL *);
  280 (* REAL *);
  281 (* CHAR *);
  282 (* SET *);
  283 (* ARRAY *);
  284 (* PLUS *);
  285 (* MINUS *);
  286 (* TIMES *);
  287 (* DIVIDE *);
  288 (* EQUAL *);
  289 (* PIPE *);
  290 (* ELLIPSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* LITERAL *);
  292 (* REALLIT *);
  293 (* BOOLLIT *);
  294 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\005\000\004\000\004\000\006\000\006\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\011\000\011\000\
\011\000\011\000\002\000\002\000\009\000\009\000\009\000\008\000\
\008\000\012\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\003\000\003\000\003\000\005\000\008\000\008\000\002\000\004\000\
\005\000\007\000\000\000\002\000\000\000\001\000\003\000\001\000\
\003\000\002\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\043\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\000\000\001\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\033\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\003\000\004\000\005\000\000\000\000\000\
\011\000\000\000\040\000\032\000\036\000\000\000\000\000\000\000\
\006\000\007\000\000\000\041\000\000\000\043\000\000\000\000\000\
\008\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\052\000\037\000\038\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\079\000\080\000\081\000\099\000\018\000\019\000\
\054\000\104\000\016\000\102\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\001\000\012\255\012\255\055\255\021\255\
\012\255\000\000\000\000\000\000\007\255\000\000\235\000\000\000\
\085\255\058\001\099\255\006\255\058\001\065\255\111\255\018\001\
\079\255\140\255\000\000\012\255\012\255\000\000\012\255\012\255\
\012\255\012\255\012\255\012\255\012\255\012\255\012\255\012\255\
\012\255\012\255\012\255\012\255\000\000\012\255\000\000\012\255\
\012\255\117\255\000\000\160\255\153\255\151\255\000\001\225\255\
\225\255\249\255\249\255\249\255\249\255\104\000\076\001\031\255\
\031\255\000\000\000\000\161\255\124\000\058\001\058\001\038\001\
\159\255\160\255\000\000\000\000\000\000\000\000\221\255\254\254\
\000\000\134\255\000\000\000\000\000\000\012\255\012\255\010\255\
\000\000\000\000\160\255\000\000\160\255\000\000\172\000\172\000\
\000\000\047\255\164\255\000\000\017\255\187\255\012\255\165\255\
\194\255\160\255\235\000\000\000\000\000\000\000\000\000\047\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\041\255\114\255\095\255\000\000\
\000\000\000\000\000\000\000\000\193\000\000\000\000\000\000\000\
\092\255\061\255\000\000\000\000\128\255\000\000\150\000\141\255\
\000\000\000\000\000\000\203\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\255\
\063\000\191\255\216\255\255\255\038\000\083\000\103\000\125\255\
\158\255\000\000\000\000\000\000\000\000\146\255\124\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\255\000\000\
\000\000\214\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\198\255\198\255\
\000\000\185\255\177\255\000\000\000\000\000\000\203\255\000\000\
\000\000\000\000\204\255\000\000\000\000\000\000\000\000\210\255"

let yygindex = "\000\000\
\000\000\123\000\171\255\189\255\000\000\000\000\252\255\232\255\
\110\000\133\000\000\000\000\000"

let yytablesize = 619
let yytable = "\015\000\
\014\000\021\000\024\000\053\000\027\000\098\000\088\000\045\000\
\092\000\028\000\093\000\001\000\005\000\097\000\006\000\046\000\
\007\000\005\000\068\000\006\000\112\000\007\000\093\000\008\000\
\055\000\100\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\029\000\069\000\
\009\000\070\000\045\000\071\000\072\000\009\000\010\000\011\000\
\012\000\017\000\045\000\010\000\011\000\012\000\013\000\005\000\
\009\000\006\000\026\000\007\000\041\000\042\000\046\000\009\000\
\048\000\009\000\048\000\024\000\047\000\024\000\046\000\024\000\
\089\000\090\000\048\000\024\000\024\000\024\000\109\000\024\000\
\024\000\095\000\096\000\009\000\051\000\024\000\024\000\043\000\
\048\000\010\000\011\000\012\000\023\000\015\000\048\000\015\000\
\107\000\015\000\024\000\024\000\045\000\015\000\015\000\015\000\
\045\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\043\000\020\000\022\000\025\000\045\000\049\000\015\000\
\015\000\015\000\015\000\045\000\015\000\015\000\019\000\047\000\
\019\000\047\000\019\000\046\000\044\000\047\000\019\000\019\000\
\019\000\046\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\046\000\047\000\052\000\049\000\046\000\049\000\
\019\000\019\000\073\000\047\000\082\000\019\000\019\000\020\000\
\046\000\020\000\074\000\020\000\084\000\094\000\087\000\020\000\
\020\000\020\000\110\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\049\000\010\000\075\000\076\000\077\000\
\078\000\020\000\020\000\010\000\013\000\010\000\020\000\020\000\
\026\000\106\000\026\000\013\000\026\000\013\000\108\000\111\000\
\026\000\026\000\026\000\051\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\045\000\014\000\013\000\050\000\
\101\000\027\000\000\000\027\000\014\000\027\000\014\000\026\000\
\026\000\027\000\027\000\027\000\105\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\014\000\
\033\000\034\000\035\000\036\000\000\000\000\000\089\000\090\000\
\027\000\027\000\091\000\000\000\039\000\040\000\041\000\042\000\
\028\000\005\000\028\000\006\000\028\000\007\000\000\000\008\000\
\028\000\028\000\028\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\028\000\
\028\000\000\000\000\000\010\000\011\000\012\000\013\000\029\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\029\000\
\029\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\025\000\000\000\025\000\000\000\029\000\029\000\
\025\000\025\000\025\000\000\000\025\000\025\000\000\000\000\000\
\000\000\000\000\025\000\025\000\030\000\000\000\030\000\000\000\
\030\000\000\000\000\000\000\000\030\000\030\000\030\000\025\000\
\025\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\031\000\000\000\031\000\000\000\031\000\000\000\000\000\000\000\
\031\000\031\000\031\000\030\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\031\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\041\000\042\000\031\000\
\031\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000\015\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\015\000\015\000\015\000\103\000\015\000\000\000\
\000\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000\015\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\015\000\015\000\015\000\
\032\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\032\000\032\000\032\000\030\000\000\000\000\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\041\000\042\000\083\000\000\000\000\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\041\000\042\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\040\000\041\000\
\042\000\000\000\050\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\040\000\041\000\042\000\000\000\086\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\040\000\041\000\
\042\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000"

let yycheck = "\004\000\
\000\000\006\000\007\000\028\000\009\000\091\000\074\000\002\001\
\011\001\003\001\013\001\001\000\001\001\004\001\003\001\010\001\
\005\001\001\001\043\000\003\001\106\000\005\001\013\001\007\001\
\029\000\093\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\032\001\044\000\
\029\001\046\000\002\001\048\000\049\000\029\001\035\001\036\001\
\037\001\038\001\010\001\035\001\036\001\037\001\038\001\001\001\
\004\001\003\001\038\001\005\001\030\001\031\001\002\001\011\001\
\004\001\013\001\006\001\002\001\004\001\004\001\010\001\006\001\
\026\001\027\001\010\001\010\001\011\001\012\001\103\000\014\001\
\015\001\086\000\087\000\029\001\006\001\020\001\021\001\003\001\
\010\001\035\001\036\001\037\001\038\001\002\001\034\001\004\001\
\101\000\006\001\033\001\034\001\006\001\010\001\011\001\012\001\
\010\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\003\001\005\000\006\000\007\000\004\001\008\001\028\001\
\029\001\030\001\031\001\010\001\033\001\034\001\002\001\004\001\
\004\001\006\001\006\001\004\001\034\001\010\001\010\001\011\001\
\012\001\010\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\006\001\002\001\009\001\004\001\010\001\006\001\
\028\001\029\001\038\001\010\001\004\001\033\001\034\001\002\001\
\010\001\004\001\003\001\006\001\004\001\032\001\008\001\010\001\
\011\001\012\001\006\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\034\001\004\001\022\001\023\001\024\001\
\025\001\028\001\029\001\011\001\004\001\013\001\033\001\034\001\
\002\001\030\001\004\001\011\001\006\001\013\001\012\001\006\001\
\010\001\011\001\012\001\006\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\010\001\004\001\030\001\012\001\
\094\000\002\001\255\255\004\001\011\001\006\001\013\001\033\001\
\034\001\010\001\011\001\012\001\096\000\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\030\001\
\016\001\017\001\018\001\019\001\255\255\255\255\026\001\027\001\
\033\001\034\001\030\001\255\255\028\001\029\001\030\001\031\001\
\002\001\001\001\004\001\003\001\006\001\005\001\255\255\007\001\
\010\001\011\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\033\001\
\034\001\255\255\255\255\035\001\036\001\037\001\038\001\002\001\
\255\255\004\001\255\255\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\255\255\006\001\255\255\033\001\034\001\
\010\001\011\001\012\001\255\255\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\002\001\255\255\004\001\255\255\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\002\001\255\255\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\033\001\034\001\014\001\015\001\016\001\
\017\001\018\001\019\001\021\001\255\255\002\001\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\033\001\
\034\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\006\001\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\010\001\033\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\255\255\033\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\255\255\033\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001"

let yynames_const = "\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  COLON\000\
  COMMA\000\
  SEMI\000\
  DSEMI\000\
  ARROW\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  INT\000\
  BOOL\000\
  REAL\000\
  CHAR\000\
  SET\000\
  ARRAY\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQUAL\000\
  PIPE\000\
  ELLIPSE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  REALLIT\000\
  BOOLLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 48 "parser.mly"
                ( List.rev _1 )
# 380 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                      ( PrimTyp(Int) )
# 386 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                      ( PrimTyp(Bool) )
# 392 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                      ( PrimTyp(Real) )
# 398 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                      ( PrimTyp(Char) )
# 404 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_typ) in
    Obj.repr(
# 63 "parser.mly"
                      ( Set(_1) )
# 411 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_typ) in
    Obj.repr(
# 64 "parser.mly"
                      ( Array(_1) )
# 418 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 65 "parser.mly"
                      ( _2 )
# 425 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 68 "parser.mly"
                      ( _1 )
# 432 "parser.ml"
               : 'simple_typ_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 69 "parser.mly"
                              ( Tuple(_1 :: (List.rev _3)) )
# 440 "parser.ml"
               : 'simple_typ_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ_or_tuple) in
    Obj.repr(
# 72 "parser.mly"
                      ( _1 )
# 447 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 73 "parser.mly"
                      ( Func(_1, _3) )
# 455 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 77 "parser.mly"
                       ( [_1] )
# 462 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 78 "parser.mly"
                              ( _3 :: _1 )
# 470 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                        ( Id(_1) )
# 477 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 82 "parser.mly"
                        ( Lit(_1) )
# 484 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                        ( RealLit(_1) )
# 491 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 84 "parser.mly"
                        ( BoolLit(_1) )
# 498 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 506 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 514 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 522 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 530 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                        ( Uniop(Neg, _2) )
# 537 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                        ( Binop(_1, Equal, _3) )
# 545 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                        ( Binop(_1, Neq,   _3) )
# 553 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                        ( Binop(_1, Less,  _3) )
# 561 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                        ( Binop(_1, Leq,   _3) )
# 569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                        ( Binop(_1, Greater, _3) )
# 577 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                        ( Binop(_1, Geq,   _3) )
# 585 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                        ( Binop(_1, And, _3) )
# 593 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                        ( Binop(_1, Or, _3) )
# 601 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_ne) in
    Obj.repr(
# 98 "parser.mly"
                                ( FuncCall(_1, _3) )
# 609 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 99 "parser.mly"
                          ( TupleLit(List.rev _2) )
# 616 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 100 "parser.mly"
                          ( SetLit(List.rev _2) )
# 623 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 101 "parser.mly"
                              ( ArrayLit(List.rev _2) )
# 630 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr_list_ne) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                              ( match List.rev _2 with
                                                [e1] -> ArrayRange(e1, None, _4)
                                                | [e1; e2] -> ArrayRange(e1, Some e2, _4)
                                                | _ -> raise (Failure("Too many arguments for ArrayRange"))
                                              )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'set_build_ext_cond) in
    Obj.repr(
# 109 "parser.mly"
    ( SetBuilder(
        (* identity function *)
        None, 
        Iter(_2, _4), 
        FuncDef([Id(_2)], [Expr(
          List.fold_left (fun e1 e2 -> Binop(e1, And, e2)) _6 (List.rev _7)
        )])
      ))
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'set_build_ext_cond) in
    Obj.repr(
# 118 "parser.mly"
    ( SetBuilder(
        Some(FuncDef([Id(_4)], [Expr(_2)])), 
        Iter(_4, _6),
        FuncDef([Id(_4)], [Expr(
          match (List.rev _7) with
          | [] -> BoolLit(true)
          | h::t -> List.fold_left (fun e1 e2 -> Binop(e1, And, e2)) (h) (t)
        )])
      ))
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                           ( Expr(_1) )
# 684 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                           ( Asn(_1, _3) )
# 692 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 132 "parser.mly"
                           ( Decl(_2, _4) )
# 700 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr_list_ne) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'func_stmt_list) in
    Obj.repr(
# 134 "parser.mly"
                           ( Asn(_1, FuncDef(List.rev _3, List.rev _6)) )
# 709 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                 ( [] )
# 715 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 138 "parser.mly"
                 ( _2 :: _1 )
# 723 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                       ( [] )
# 729 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                       ( [_1] )
# 736 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                       ( _3 :: _1 )
# 744 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                       ( [_1] )
# 751 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                       ( _3 :: _1 )
# 759 "parser.ml"
               : 'expr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                  ( Expr(_2) :: _1 )
# 767 "parser.ml"
               : 'func_stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "parser.mly"
                      ( [] )
# 773 "parser.ml"
               : 'set_build_ext_cond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list_ne) in
    Obj.repr(
# 169 "parser.mly"
                      ( _2 )
# 780 "parser.ml"
               : 'set_build_ext_cond))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
