type token =
  | LET
  | COLON
  | SEMI
  | INT
  | SET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASN
  | EOF
  | LITERAL of (int)
  | VARIABLE of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 21 "parser.ml"
let yytransl_const = [|
  257 (* LET *);
  258 (* COLON *);
  259 (* SEMI *);
  260 (* INT *);
  261 (* SET *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* TIMES *);
  265 (* DIVIDE *);
  266 (* ASN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  267 (* LITERAL *);
  268 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\002\000\004\000\004\000\004\000\004\000\003\000\005\000\
\001\000\001\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\002\000"

let yydgoto = "\002\000\
\016\000\022\000"

let yysindex = "\004\000\
\002\255\000\000\250\254\000\000\006\255\017\255\015\255\002\255\
\002\255\002\255\002\255\002\255\002\255\014\255\024\255\017\255\
\031\255\038\255\045\255\052\255\000\000\255\254\002\255\002\255\
\002\255\002\255\002\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\001\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\015\000\
\022\000\029\000\036\000\000\000\000\000"

let yygindex = "\000\000\
\255\255\000\000"

let yytablesize = 301
let yytable = "\006\000\
\010\000\028\000\003\000\029\000\001\000\007\000\015\000\011\000\
\017\000\018\000\019\000\020\000\004\000\005\000\003\000\008\000\
\014\000\021\000\012\000\009\000\007\000\004\000\010\000\011\000\
\012\000\013\000\023\000\000\000\005\000\010\000\011\000\012\000\
\013\000\024\000\000\000\006\000\010\000\011\000\012\000\013\000\
\025\000\000\000\000\000\010\000\011\000\012\000\013\000\026\000\
\000\000\000\000\010\000\011\000\012\000\013\000\027\000\000\000\
\000\000\010\000\011\000\012\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\010\000\010\000\
\010\000\010\000\011\000\000\000\000\000\011\000\011\000\011\000\
\011\000\003\000\000\000\000\000\003\000\003\000\003\000\003\000\
\004\000\000\000\000\000\004\000\004\000\004\000\004\000\005\000\
\000\000\000\000\005\000\005\000\005\000\005\000\006\000\000\000\
\000\000\006\000\006\000\006\000\006\000"

let yycheck = "\001\000\
\000\000\003\001\001\001\005\001\001\000\012\001\008\000\000\000\
\010\000\011\000\012\000\013\000\011\001\012\001\000\000\010\001\
\002\001\004\001\000\000\003\001\000\000\000\000\006\001\007\001\
\008\001\009\001\003\001\255\255\000\000\006\001\007\001\008\001\
\009\001\003\001\255\255\000\000\006\001\007\001\008\001\009\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001"

let yynames_const = "\
  LET\000\
  COLON\000\
  SEMI\000\
  INT\000\
  SET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASN\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "parser.mly"
        ( Int )
# 179 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 22 "parser.mly"
             ( Set(_1) )
# 186 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 25 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 194 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 26 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 202 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 27 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 210 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 28 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 218 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 29 "parser.mly"
                        ( Seq(_1, _3) )
# 226 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 30 "parser.mly"
                              ( Decl(_2, _4) )
# 234 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 31 "parser.mly"
                   ( Lit(_1) )
# 241 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
                   ( Var(_1) )
# 248 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 33 "parser.mly"
                         ( Asn(_1, _3) )
# 256 "parser.ml"
               : Ast.expr))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
